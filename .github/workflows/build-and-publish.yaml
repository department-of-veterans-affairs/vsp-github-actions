name: build-and-publish
run-name: Build And Publish

on:
  workflow_call:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    permissions: write-all
    # permissions:
    #   contents: read
    #   pull-requests: write
    #   id-token: write
    #   repository-projects: write
  
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0 # needed to get enough tag history to determine the semver

      - name: Git Version
        id: version
        uses: codacy/git-version@2.7.1
        with:
          release-branch: main
          prefix: v
      - name: Echo the version
        run: |
          echo ${{ steps.version.outputs.version }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.0
        with:
          aws-region: us-gov-west-1
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2.0.1
        with:
          mask-password: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            dsva/${{ github.event.repository.name }}
            ${{ steps.ecr-login.outputs.registry }}/dsva/${{ github.event.repository.name }}            
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha            
  
      - name: Build Docker Image
        uses: docker/build-push-action@v6
        if: ${{ hashFiles('Dockerfile') != '' }}
        with:
          build-args: |
            RAILS_ENV=production
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/dsva/${{ github.event.repository.name }}:${{ steps.version.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Inject Version into helm chart
        if: ${{ hashFiles('./helm') != '' }}
        working-directory: ./helm
        run: |
          yq e -i '.image.tag = "${{ steps.version.outputs.version }}"' values.yaml
          yq e -i '.version = "${{ steps.version.outputs.version }}"' Chart.yaml

      - name: helm Package and Publish
        if: ${{ hashFiles('./helm') != '' }}
        working-directory: ./helm
        run: |
          helm package ${{ github.event.repository.name }}
          aws ecr get-login-password --region us-gov-west-1 | helm registry login --username AWS --password-stdin 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com
          helm push ${{ github.event.repository.name }}-${{ steps.version.outputs.version }}.tgz oci://008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/dsva/helm
  
  tag:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [build-and-publish]

    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Create git tag if on main
        if: github.ref == 'refs/heads/main'
        run: |
          git tag ${{ needs.build-and-publish.outputs.version }}
          git push origin ${{ needs.build-and-publish.outputs.version }}
  
  trigger:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [build-and-publish, tag]

    steps:
      # Because github doesn't trigger pipelines on events that are created by pipelines we must
      # trigger the deploy on the tag we just created.
      #
      # Future we should embed the standard deploy job in this pipeline as another job with the correct
      # constraints.  This would mean consumers of the prt workflows would not need to add the deploy job
      # at all.
      - name: Trigger Deploy
        if: github.ref == 'refs/heads/main'
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/workflows/deploy.yaml/dispatches \
            -d '{"ref":"${{ needs.build-and-publish.outputs.version }}","inputs":{}}'
            # -d '{"ref":"main","inputs":{}}'
