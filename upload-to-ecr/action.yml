name: "Upload Image to ECR"
description: "Build an image locally, scan for vulnerabilities, push to ECR, sign the image, create an SBOM, and attest the SBOM"

inputs:
  additional-image-tag:
    required: false
    description: Tag to use for image in addition to SHA tag
  aws-access-key-id:
    required: true
    description: AWS Access Key ID
  aws-kms-key:
    required: true
    description: KMS Key to sign image with
  aws-region:
    required: false
    description: AWS Region
    default: "us-gov-west-1"
  aws-secret-access-key:
    required: true
    description: AWS Secret Access Key
  dockerfile:
    required: false
    description: Dockerfile name
    default: "./Dockerfile"
  docker-build-args:
    required: false
    description: Docker Build Arguments
    default: ""
  ecr-repository:
    required: true
    description: ECR Repository for image upload
  env-vars:
    required: false
    description: Environment Variables
    default: 0
  github-token-parameter-store-path:
    required: true
    description: Path in Parameter Store for Github Token
  latest-tag:
    required: false
    description: Tag with latest
    default: "true"
  sha-tag:
    required: false
    description: Tag with SHA
    default: "true"
  vuln-fails-build:
    required: false
    default: "false"
    description: Vulnerability exceeding Severity Cutoff causes workflow to fail?
  vuln-severity-cutoff:
    required: false
    default: critical
    description: Severity cutoff for Anchore Scan

outputs:
  UUID_tag:
    description: Container Tag UUID
    value: ${{ steps.generate-uuid.outputs.uuid }}

runs:
  using: "composite"
  steps:
    - name: Generate UUID
      id: generate-uuid
      uses: filipstefansson/uuid-action@ce29ebbb0981ac2448c2e406e848bfaa30ddf04c
    - name: Configure AWS Credentials
      uses:  aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # 2.0.0
      with:
       aws-access-key-id: ${{ inputs.aws-access-key-id }}
       aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
       aws-region: ${{ inputs.aws-region }}
    - name: Get bot token from Parameter Store
      uses: department-of-veterans-affairs/action-inject-ssm-secrets@d8e6de3bde4dd728c9d732baef58b3c854b8c4bb # latest
      with:
       ssm_parameter: ${{ inputs.github-token-parameter-store-path }}
       env_variable_name: GITHUB_TOKEN
    - name: Read Env Vars from .env file
      uses: xom9ikk/dotenv@d3ff95524814ceac377510f30f4af6296ea612c1
      if: ${{ inputs.env-vars != false }}
      with:
       path: ./
    - name: Set Up Docker Buildx
      uses: docker/setup-buildx-action@master
      id: buildx
      with:
       install: true
    - name: Build Local Container for Scan
      uses: docker/build-push-action@v2
      with:
        tags: localbuild/testimage:latest
        builder: ${{ steps.buildx.outputs.name }}
        push: false
        load: true
        context: .
        file: ${{ inputs.dockerfile }}
        build-args: ${{ inputs.docker-build-args }}
        cache-from: type=gha, scope=${{ github.workflow }}
        cache-to: type=gha, scope=${{ github.workflow }}
    - name: Scan Image
      uses: anchore/scan-action@001541c49d0296fbf402640be259ac7710465fab
      id: scan
      with:
       image: "localbuild/testimage:latest"
       severity-cutoff: ${{ inputs.vuln-severity-cutoff }}
       acs-report-enable: true
       fail-build: ${{ inputs.vuln-fails-build }}
    - name: Upload Scan Report
      uses: github/codeql-action/upload-sarif@v1
      if: ${{ always() }}
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
    - name: Log into ECR
      if: ${{ success() }}
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Generate tag list
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: |
          ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repository }}
        tags: |
          type=raw,enable=${{ !!inputs.additional-image-tag }},value=${{ inputs.additional-image-tag }}
          type=raw,enable=true,value=${{ steps.generate-uuid.outputs.uuid }}
          type=sha,enable=${{ inputs.sha-tag }},format=long
          type=raw,enable=${{ inputs.latest-tag }},value=latest
    - name: Build final image
      if: steps.login-ecr.outcome == 'success'
      uses: docker/build-push-action@v2
      env:
        ADDITIONAL_IMAGE_TAG: ${{ inputs.additional-image-tag }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        IMAGE_TAG: ${{ github.sha }}
        UUID_TAG: ${{ steps.generate-uuid.outputs.uuid }}
      with:
        context: .
        file: ${{ inputs.dockerfile }}
        builder: ${{ steps.buildx.outputs.name }}
        build-args: ${{ inputs.docker-build-args }}
        tags: ${{ steps.meta.outputs.tags }}
        push: true
        cache-from: type=gha, scope=${{ github.workflow }}
    - name: Install Cosign
      if: ${{ success() }}
      uses: sigstore/cosign-installer@116dc6872c0a067bcb78758f18955414cdbf918f
    - name: Sign Image
      shell: bash
      env:
       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
       ECR_REPOSITORY: ${{ inputs.ecr-repository }}
       IMAGE_TAG: ${{ steps.generate-uuid.outputs.uuid }}
       AWS_KMS_KEY: ${{ inputs.aws-kms-key }}
      run: |
        cosign sign --key awskms:///${{ env.AWS_KMS_KEY }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
    - name: Install Syft
      shell: bash
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
    - name: Create SBOM
      shell: bash
      env:
       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
       ECR_REPOSITORY: ${{ inputs.ecr-repository }}
       IMAGE_TAG: ${{ steps.generate-uuid.outputs.uuid }}
      run: |
          syft ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} -o json | jq --compact-output > ./sbom.syft.json
    - name: Attest SBOM
      shell: bash
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: ${{ steps.generate-uuid.outputs.uuid }}
          AWS_KMS_KEY: ${{ inputs.aws-kms-key }}
      run: |
        cosign attest --predicate sbom.syft.json --key awskms:///${{ env.AWS_KMS_KEY }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
